{"version":3,"file":"main.85292cee09306c8d15cb.bundle.js","sources":["webpack:///./src/InputField.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n\tFormControl,\n\tFormHelperText,\n\tInput,\n\tInputLabel\n\t} from '@material-ui/core';\nimport { FormHelperTextProps } from '@material-ui/core/FormHelperText';\nimport { InputLabelProps } from '@material-ui/core/InputLabel';\nimport { InputProps } from '@material-ui/core/Input';\nimport { isEmpty, kebabCase } from 'lodash';\n\nconst style: React.CSSProperties = {\n  height: '1.1875rem'\n};\n\nconst getType = (type?: string): string => (isEmpty(type) ? 'text' : (type as string));\n\nconst getLabel = (id?: string, label?: string, inputLabelProps?: InputLabelProps) => {\n  if (isEmpty(label)) {\n    return null;\n  }\n\n  if (inputLabelProps === undefined) {\n    inputLabelProps = {};\n  }\n\n  return (\n    <InputLabel {...inputLabelProps} htmlFor={id}>\n      {label}\n    </InputLabel>\n  );\n};\n\nconst getHelperText = (helperText: React.ReactNode, helperTextProps?: FormHelperTextProps) => {\n  if (isEmpty(helperText)) {\n    return null;\n  }\n\n  if (helperTextProps === undefined) {\n    helperTextProps = {};\n  }\n\n  return <FormHelperText {...helperTextProps}>{helperText}</FormHelperText>;\n};\n\nconst InputField = (props: InputFieldProps) => {\n  const inputProps: InputProps = props.inputProps\n    ? props.inputProps\n    : {\n        inputProps: {}\n      };\n\n  return (\n    <FormControl fullWidth={true}>\n      {getLabel(props.id, props.label, props.inputLabelProps)}\n      <Input\n        {...inputProps}\n        id={props.id}\n        inputProps={{\n          ...inputProps.inputProps,\n          style\n        }}\n        type={getType(props.type)}\n        placeholder={props.placeholder}\n        value={props.value}\n        name={kebabCase(props.id || props.label || props.placeholder)}\n        onFocus={props.onGotFocus}\n        onBlur={props.onLostFocus}\n        onChange={props.onChange}\n        startAdornment={props.startAdornment}\n        endAdornment={props.endAdornment}\n      />\n      {getHelperText(props.helperText, props.helperTextProps)}\n    </FormControl>\n  );\n};\n\nexport interface InputFieldProps {\n  endAdornment?: React.ReactNode;\n  helperText?: string;\n  helperTextProps?: FormHelperTextProps;\n  id?: string;\n  inputProps?: InputProps;\n  inputLabelProps?: InputLabelProps;\n  label?: string;\n  onGotFocus?: () => void;\n  onLostFocus?: () => void;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  startAdornment?: React.ReactNode;\n  type: string;\n  value?: string;\n}\n\nexport default InputField;\n"],"mappings":"AAYA","sourceRoot":""}